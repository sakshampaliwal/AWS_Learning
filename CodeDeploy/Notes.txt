appspec.yml:
- The appspec.yml file stands for application specification file, app spec file for short, and is a file unique to CodeDeploy. 
  It is designed to manage our deployments by a series of hooks, or events, that are defined in the Hooks section of the file. 
- This is a file in YAML or JSON format. This file tells CodeDeploy what to install on our instances, and what to run based on hooks in response to our updates to the code.
  It outlines how the deployment should happen, where the application should be installed, and the lifecycle scripts that need to be executed at each stage of the deployment.
- The appspec.yml file should be placed in the root directory of your application’s deployment archive.

Version and OS:
- Version is the version of the app spec file, and must remain 0.0 because this is the only allowed version on CodeDeploy, however one day this may change.
- OS Specifies the operating system of the target instances where the deployment will occur

Files:
Source: SourceDirectory represents the directory in your application’s root that you want to copy,
Destination: DestinationDirectory is where you want the copied files to be placed on the target instance.

Hooks:
- Lifecycle event hooks refer to the series of events that describes how a deployment is accomplished. 
  It allows you to control or perform actions on different stages of your deployment.
- Hooks tell CodeDeploy what to do.  Hooks are executed once per deployment, so any updates will require you to redeploy. 

hooks:
- ApplicationStop
  Down loadBundle
  BeforeInstall
  Install
  AfterInstall
  ApplicationStart
  ValidateService

#The following 6 are only used if using a Classic Load Balancer.
  BeforeBlockTraffic
  BlockTraffic
  AfterBlockTraffic
  BeforeAllowTraffic
  AllowTraffic
  AfterAllowTraffic

ApplicationStop: Actions to stop the currently running application or services before deployment.
DownloadBundle: Downloading or retrieving the application bundle or necessary files from the deployment source.
BeforeInstall: Tasks to be executed before the new version of the application is installed.
Install: Installing or deploying the new version of the application.
AfterInstall: Actions to be performed after the new version of the application is installed, such as configuring or setting up.
ApplicationStart: Starting the newly installed application or services.
ValidateService: Checking or validating the newly deployed service to ensure it's working correctly.

For deployments using a Classic Load Balancer:

BeforeBlockTraffic: Tasks to be executed before blocking traffic to the previous version.
BlockTraffic: Stopping or blocking traffic to the previous version of the application.
AfterBlockTraffic: Actions to be performed after blocking traffic to the previous version.
BeforeAllowTraffic: Tasks to be executed before allowing traffic to the newly deployed version.
AllowTraffic: Allowing or enabling traffic to the newly deployed version.
AfterAllowTraffic: Actions to be performed after allowing traffic to the newly deployed version.

Note: 
The deployment system, such as AWS CodeDeploy, handles the downloading or fetching of your application files or bundle from the source to the deployment target as part of its built-in functionality. You don't usually need to explicitly instruct it to "DownloadBundle" in the appspec.yml because that step is managed behind the scenes.

Location: It defines the executable or script that needs to run when the corresponding deployment phase is reached.
Location is the location of the script in our code file. 

Timeout: 
If the script/command takes longer than the specified timeout, the deployment process may mark it as failed. It is in seconds.

Runas: 
It specifies the user account or role the script should run as. Think of it as who the instance should run/install the script as i.e root or a different IAM user.



